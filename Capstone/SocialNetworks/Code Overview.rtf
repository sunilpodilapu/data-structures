{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf460
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;}
\margl1440\margr1440\vieww15820\viewh19740\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs60 \cf2 \expnd0\expndtw0\kerning0
Overall Design
\fs72 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf2 Originally the CapGraph was implemented as a single entity with the use of the a hashmap as the holder for the vertices and their respective edges.  However when I began the more in-depth analysis I wanted to introduce a Node class in order to effeciently track each vertexes data as well as hopefully cleanly implement the algorithms that I wanted to.  Whether that was successful is obviously in the eye of the beholder however it definitely simplified both the SCC method and made calculating min cuts with the Karger algorithm much less challenging I believe.  Finally packaging all the analysis into its own class that was able to execute and log the data abstracted everything away from the data and functions that acted on that data.\
\pard\pardeftab720\partightenfactor0

\fs40 \cf2 \
Class name: Node
\fs60 \cf2 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf2 The node class is the place holder for all the nodes in the graph.  It contains relevant information for each node such as the vertex integer associated with it, list and size of all nodes it has outgoing connections to as well as the list and size of all nodes that have connections coming to it.  The latter functionality was very helpful when building the SCC function with the new project structure.  There is also extra functionality for adding, removing and testing of neighbor nodes.\
\
\pard\pardeftab720\partightenfactor0

\fs40 \cf2 Class name: CapGraph
\fs60 \cf2 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf2 The CapGraph class has a lot of the basic implementation of the Graph class however the biggest difference is the use of the node class and implementation of the ratio calculator and the Karger min cut algorithm.  Both the getSCC\'92s and getMinCuts methods required a decent handful of additional methods including the ability to remove nodes, get all nodes in the graph, deep copy the graph as well as helper methods for those specific algorithms.\
\
\pard\pardeftab720\partightenfactor0

\fs40 \cf2 Class name: Analyze
\fs60 \cf2 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf2 The Analyze class sole functionality is to run the analysis of the social network graph data.  After loading each of the graphs, it executes each of the algorithms implemented in the CapGraph class and then compiles that data in order for the analysis to be done with the findings.}